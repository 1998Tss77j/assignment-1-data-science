{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "def reverse_string(input_string):\n    reversed_string = \"\"\n    for char in input_string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\n# Example usage\ninput_str = \"Hello, World!\"\nreversed_str = reverse_string(input_str)\nprint(reversed_str)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": [
        {
          "name": "stdout",
          "text": "!dlroW ,olleH\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_palindrome(string):\n    # Convert the string to lowercase and remove non-alphanumeric characters\n    cleaned_string = ''.join(char.lower() for char in string if char.isalnum())\n\n    # Check if the cleaned string is equal to its reverse\n    return cleaned_string == cleaned_string[::-1]\n\ninput_string = \"A man, a plan, a canal, Panama!\"\nif is_palindrome(input_string):\n    print(\"The string is a palindrome.\")\nelse:\n    print(\"The string is not a palindrome.\")\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 5,
      "outputs": [
        {
          "name": "stdout",
          "text": "The string is a palindrome.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_largest_element(lst):\n    if len(lst) == 0:\n        return None\n\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n\n    return largest \nnumbers = [10, 5, 23, 8, 17, 3]\nlargest_number = find_largest_element(numbers)\nprint(\"The largest number in the list is:\", largest_number)\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 6,
      "outputs": [
        {
          "name": "stdout",
          "text": "The largest number in the list is: 23\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def count_occurrences(lst):\n    occurrence_count = {}\n\n    for element in lst:\n        if element in occurrence_count:\n            occurrence_count[element] += 1\n        else:\n            occurrence_count[element] = 1\n\n    return occurrence_count\n\nnumbers = [1, 2, 3, 2, 1, 3, 1, 2, 3, 4, 5, 4, 4]\noccurrences = count_occurrences(numbers)\nfor element, count in occurrences.items():\n    print(f\"The element {element} occurs {count} times.\")\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 7,
      "outputs": [
        {
          "name": "stdout",
          "text": "The element 1 occurs 3 times.\nThe element 2 occurs 3 times.\nThe element 3 occurs 3 times.\nThe element 4 occurs 3 times.\nThe element 5 occurs 1 times.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_second_largest(lst):\n    if len(lst) < 2:\n        return None\n\n    largest = float('-inf')\n    second_largest = float('-inf')\n\n    for num in lst:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num < largest:\n            second_largest = num\n\n    return second_largest\nnumbers = [10, 5, 23, 8, 17, 3]\nsecond_largest_number = find_second_largest(numbers)\nprint(\"The second largest number in the list is:\", second_largest_number)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": [
        {
          "name": "stdout",
          "text": "The second largest number in the list is: 17\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def remove_duplicates(lst):\n    return list(set(lst))\nnumbers = [1, 2, 3, 2, 1, 3, 1, 2, 3, 4, 5, 4, 4]\nunique_numbers = remove_duplicates(numbers)\nprint(\"List with duplicates removed:\", unique_numbers)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 9,
      "outputs": [
        {
          "name": "stdout",
          "text": "List with duplicates removed: [1, 2, 3, 4, 5]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\nnumber = 5\nfactorial_value = factorial(number)\nprint(f\"The factorial of {number} is:\", factorial_value)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "name": "stdout",
          "text": "The factorial of 5 is: 120\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\nnumber = 17\nif is_prime(number):\n    print(f\"The number {number} is prime.\")\nelse:\n    print(f\"The number {number} is not prime.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "name": "stdout",
          "text": "The number 17 is prime.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def sort_list_ascending(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst\nnumbers = [10, 5, 23, 8, 17, 3]\nsorted_numbers = sort_list_ascending(numbers)\nprint(\"List sorted in ascending order:\", sorted_numbers)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 12,
      "outputs": [
        {
          "name": "stdout",
          "text": "List sorted in ascending order: [3, 5, 8, 10, 17, 23]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_sum(lst):\n    total_sum = sum(lst)\n    return total_sum\nnumbers = [1, 2, 3, 4, 5]\nsum_of_numbers = find_sum(numbers)\nprint(\"The sum of numbers in the list is:\", sum_of_numbers)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": [
        {
          "name": "stdout",
          "text": "The sum of numbers in the list is: 15\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_common_elements(list1, list2):\n    common_elements = set(list1) & set(list2)\n    return list(common_elements)\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\ncommon_elements = find_common_elements(list1, list2)\nprint(\"Common elements between the two lists:\", common_elements)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 14,
      "outputs": [
        {
          "name": "stdout",
          "text": "Common elements between the two lists: [4, 5]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_anagram(str1, str2):\n    str1 = str1.lower().replace(\" \", \"\")\n    str2 = str2.lower().replace(\" \", \"\")\n\n    return sorted(str1) == sorted(str2)\nstring1 = \"listen\"\nstring2 = \"silent\"\n\nif is_anagram(string1, string2):\n    print(f\"{string1} and {string2} are anagrams.\")\nelse:\n    print(f\"{string1} and {string2} are not anagrams.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 15,
      "outputs": [
        {
          "name": "stdout",
          "text": "listen and silent are anagrams.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def permutations(string):\n    if len(string) == 0:\n        return []\n\n    if len(string) == 1:\n        return [string]\n\n    perms = []\n    for i in range(len(string)):\n        char = string[i]\n        remaining_chars = string[:i] + string[i+1:]\n        for perm in permutations(remaining_chars):\n            perms.append(char + perm)\n\n    return perms\nstring = \"abc\"\nperms = permutations(string)\nprint(\"All permutations of\", string, \"are:\")\nfor perm in perms:\n    print(perm)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "name": "stdout",
          "text": "All permutations of abc are:\nabc\nacb\nbac\nbca\ncab\ncba\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def fibonacci(n):\n    sequence = []\n    if n <= 0:\n        return sequence\n\n    a, b = 0, 1\n    sequence.append(a)\n    for _ in range(1, n):\n        sequence.append(b)\n        a, b = b, a + b\n\n    return sequence\nterms = 10\nfib_sequence = fibonacci(terms)\nprint(\"Fibonacci sequence up to\", terms, \"terms:\")\nprint(fib_sequence)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 18,
      "outputs": [
        {
          "name": "stdout",
          "text": "Fibonacci sequence up to 10 terms:\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_median(numbers):\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n    middle = length // 2\n\n    if length % 2 == 0:\n        median = (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2\n    else:\n        median = sorted_numbers[middle]\n\n    return median\nnumbers = [10, 5, 23, 8, 17]\nmedian = find_median(numbers)\nprint(\"The median of the list is:\", median)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 19,
      "outputs": [
        {
          "name": "stdout",
          "text": "The median of the list is: 10\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\nnumbers1 = [1, 2, 3, 4, 5]\nnumbers2 = [10, 5, 23, 8, 17]\n\nif is_sorted(numbers1):\n    print(\"numbers1 is sorted in non-decreasing order.\")\nelse:\n    print(\"numbers1 is not sorted in non-decreasing order.\")\n\nif is_sorted(numbers2):\n    print(\"numbers2 is sorted in non-decreasing order.\")\nelse:\n    print(\"numbers2 is not sorted in non-decreasing order.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 20,
      "outputs": [
        {
          "name": "stdout",
          "text": "numbers1 is sorted in non-decreasing order.\nnumbers2 is not sorted in non-decreasing order.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_intersection(list1, list2):\n    intersection = list(set(list1) & set(list2))\n    return intersection\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nintersection = find_intersection(list1, list2)\nprint(\"Intersection of the two lists:\", intersection)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "name": "stdout",
          "text": "Intersection of the two lists: [4, 5]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def max_subarray_sum(nums):\n    if not nums:\n        return 0\n\n    current_sum = nums[0]\n    max_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\nnums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nmax_sum = max_subarray_sum(nums)\nprint(\"Maximum subarray sum:\", max_sum)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 22,
      "outputs": [
        {
          "name": "stdout",
          "text": "Maximum subarray sum: 6\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def remove_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''.join([char for char in string if char.lower() not in vowels])\n    return result\ninput_string = \"Hello, World!\"\noutput_string = remove_vowels(input_string)\nprint(\"String after removing vowels:\", output_string)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "name": "stdout",
          "text": "String after removing vowels: Hll, Wrld!\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": " \ndef reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\ninput_sentence = \"Hello, World! Welcome to Python.\"\noutput_sentence = reverse_words(input_sentence)\nprint(\"Reversed sentence:\", output_sentence)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 24,
      "outputs": [
        {
          "name": "stdout",
          "text": "Reversed sentence: Python. to Welcome World! Hello,\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def are_anagrams(str1, str2):\n    return sorted(str1) == sorted(str2)\nstring1 = \"listen\"\nstring2 = \"silent\"\nif are_anagrams(string1, string2):\n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings are not anagrams.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 25,
      "outputs": [
        {
          "name": "stdout",
          "text": "The strings are anagrams.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def first_non_repeating_char(string):\n    char_count = {}\n    \n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\nstring = \"aabbcde\"\nfirst_non_repeating = first_non_repeating_char(string)\nif first_non_repeating:\n    print(\"First non-repeating character:\", first_non_repeating)\nelse:\n    print(\"There is no non-repeating character in the string.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 26,
      "outputs": [
        {
          "name": "stdout",
          "text": "First non-repeating character: c\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def prime_factors(n):\n    factors = []\n    divisor = 2\n\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors\nnumber = 84\nfactors = prime_factors(number)\nprint(\"Prime factors of\", number, \"are:\", factors)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "name": "stdout",
          "text": "Prime factors of 84 are: [2, 2, 3, 7]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_power_of_two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\nnumber1 = 16\nnumber2 = 17\n\nif is_power_of_two(number1):\n    print(number1, \"is a power of two.\")\nelse:\n    print(number1, \"is not a power of two.\")\n\nif is_power_of_two(number2):\n    print(number2, \"is a power of two.\")\nelse:\n    print(number2, \"is not a power of two.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 28,
      "outputs": [
        {
          "name": "stdout",
          "text": "16 is a power of two.\n17 is not a power of two.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i, j = 0, 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    # Append remaining elements of list1, if any\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n\n    # Append remaining elements of list2, if any\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n\n    return merged_list\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\nmerged_list = merge_sorted_lists(list1, list2)\nprint(\"Merged sorted list:\", merged_list)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 29,
      "outputs": [
        {
          "name": "stdout",
          "text": "Merged sorted list: [1, 2, 3, 4, 5, 6, 7, 8]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "from collections import Counter\n\ndef find_mode(numbers):\n    count = Counter(numbers)\n    mode = count.most_common(1)\n    return mode[0][0]\nnumbers = [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5]\nmode = find_mode(numbers)\nprint(\"Mode:\", mode)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 30,
      "outputs": [
        {
          "name": "stdout",
          "text": "Mode: 5\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\nnum1 = 36\nnum2 = 48\ngcd = find_gcd(num1, num2)\nprint(\"GCD of\", num1, \"and\", num2, \"is:\", gcd)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 31,
      "outputs": [
        {
          "name": "stdout",
          "text": "GCD of 36 and 48 is: 12\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def square_root(n):\n    if n < 0:\n        raise ValueError(\"Square root is not defined for negative numbers.\")\n    elif n == 0:\n        return 0\n\n    x = n\n    y = (x + 1) // 2\n\n    while y < x:\n        x = y\n        y = (x + n // x) // 2\n\n    return x\nnumber = 25\nsqrt = square_root(number)\nprint(\"Square root of\", number, \"is:\", sqrt)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 32,
      "outputs": [
        {
          "name": "stdout",
          "text": "Square root of 25 is: 5\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "import re\n\ndef is_valid_palindrome(s):\n    s = re.sub(r'[^a-zA-Z0-9]', '', s.lower())\n    return s == s[::-1]\nstring = \"A man, a plan, a canal: Panama\"\nif is_valid_palindrome(string):\n    print(\"The string is a valid palindrome.\")\nelse:\n    print(\"The string is not a valid palindrome.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 33,
      "outputs": [
        {
          "name": "stdout",
          "text": "The string is a valid palindrome.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_min_in_rotated_list(nums):\n    left = 0\n    right = len(nums) - 1\n\n    while left < right:\n        mid = left + (right - left) // 2\n\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return nums[left]\nnums = [4, 5, 6, 7, 0, 1, 2]\nmin_element = find_min_in_rotated_list(nums)\nprint(\"Minimum element:\", min_element)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 34,
      "outputs": [
        {
          "name": "stdout",
          "text": "Minimum element: 0\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def sum_of_even_numbers(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_even = sum_of_even_numbers(numbers)\nprint(\"Sum of even numbers:\", sum_even)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 35,
      "outputs": [
        {
          "name": "stdout",
          "text": "Sum of even numbers: 30\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    elif exponent < 0:\n        return 1 / power(base, -exponent)\n    else:\n        return base * power(base, exponent - 1)\nbase = 2\nexponent = 5\nresult = power(base, exponent)\nprint(base, \"raised to the power\", exponent, \"is:\", result)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 36,
      "outputs": [
        {
          "name": "stdout",
          "text": "2 raised to the power 5 is: 32\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def remove_duplicates_preserve_order(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\nnumbers = [1, 2, 3, 2, 4, 5, 1, 3, 6, 4]\nunique_numbers = remove_duplicates_preserve_order(numbers)\nprint(\"Original list:\", numbers)\nprint(\"List with duplicates removed:\", unique_numbers)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 37,
      "outputs": [
        {
          "name": "stdout",
          "text": "Original list: [1, 2, 3, 2, 4, 5, 1, 3, 6, 4]\nList with duplicates removed: [1, 2, 3, 4, 5, 6]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    prefix = strs[0]\n    for string in strs[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\nstrings = [\"flower\", \"flow\", \"flight\"]\ncommon_prefix = longest_common_prefix(strings)\nprint(\"Longest common prefix:\", common_prefix)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 38,
      "outputs": [
        {
          "name": "stdout",
          "text": "Longest common prefix: fl\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    elif num == 0 or num == 1:\n        return True\n\n    left, right = 1, num // 2\n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\nnum = 16\nif is_perfect_square(num):\n    print(num, \"is a perfect square.\")\nelse:\n    print(num, \"is not a perfect square.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 40,
      "outputs": [
        {
          "name": "stdout",
          "text": "16 is a perfect square.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def product_of_list(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product\nnumbers = [1, 2, 3, 4, 5]\nproduct = product_of_list(numbers)\nprint(\"Product of the list:\", product)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 41,
      "outputs": [
        {
          "name": "stdout",
          "text": "Product of the list: 120\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = \" \".join(reversed_words)\n    return reversed_sentence\nsentence = \"Hello world! This is a sentence.\"\nreversed_sentence = reverse_sentence(sentence)\nprint(\"Original sentence:\", sentence)\nprint(\"Reversed sentence:\", reversed_sentence)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 42,
      "outputs": [
        {
          "name": "stdout",
          "text": "Original sentence: Hello world! This is a sentence.\nReversed sentence: sentence. a is This world! Hello\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_missing_number(lst):\n    n = len(lst) + 1\n    total_sum = (n * (n + 1)) // 2\n    actual_sum = sum(lst)\n    missing_number = total_sum - actual_sum\n    return missing_number\nnumbers = [1, 2, 3, 5, 6, 7, 8, 9]\nmissing_number = find_missing_number(numbers)\nprint(\"Missing number:\", missing_number)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 43,
      "outputs": [
        {
          "name": "stdout",
          "text": "Missing number: 4\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def sum_of_digits(number):\n    sum = 0\n    while number > 0:\n        digit = number % 10\n        sum += digit\n        number //= 10\n    return sum\nnumber = 12345\ndigit_sum = sum_of_digits(number)\nprint(\"Number:\", number)\nprint(\"Sum of digits:\", digit_sum)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 44,
      "outputs": [
        {
          "name": "stdout",
          "text": "Number: 12345\nSum of digits: 15\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_palindrome(string):\n    reversed_string = string[::-1]\n    return string == reversed_string\nword = \"Racecar\"\nif is_palindrome(word):\n    print(word, \"is a valid palindrome.\")\nelse:\n    print(word, \"is not a valid palindrome.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 45,
      "outputs": [
        {
          "name": "stdout",
          "text": "Racecar is not a valid palindrome.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def find_smallest_missing_positive(nums):\n    n = len(nums)\n    contains_one = False\n\n    for i in range(n):\n        if nums[i] == 1:\n            contains_one = True\n        elif nums[i] <= 0 or nums[i] > n:\n            nums[i] = 1\n\n    if not contains_one:\n        return 1\n\n\n    for i in range(n):\n        index = abs(nums[i]) - 1\n        if nums[index] > 0:\n            nums[index] = -nums[index]\n\n    for i in range(n):\n        if nums[i] > 0:\n            return i + 1\n    return n + 1\nnumbers = [3, 4, -1, 1]\nsmallest_missing = find_smallest_missing_positive(numbers)\nprint(\"Smallest missing positive integer:\", smallest_missing)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 46,
      "outputs": [
        {
          "name": "stdout",
          "text": "Smallest missing positive integer: 2\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def longest_palindrome_substring(string):\n    n = len(string)\n    longest_palindrome = \"\"\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < n and string[left] == string[right]:\n            left -= 1\n            right += 1\n        return string[left + 1:right]\n    for i in range(n):\n        odd_palindrome = expand_around_center(i, i)  \n        even_palindrome = expand_around_center(i, i + 1)  \n\n    \n        if len(odd_palindrome) > len(longest_palindrome):\n            longest_palindrome = odd_palindrome\n        if len(even_palindrome) > len(longest_palindrome):\n            longest_palindrome = even_palindrome\n\n    return longest_palindrome\nnumbers = [3, 4, -1, 1]\nsmallest_missing = find_smallest_missing_positive(numbers)\nprint(\"Smallest missing positive integer:\", smallest_missing)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 47,
      "outputs": [
        {
          "name": "stdout",
          "text": "Smallest missing positive integer: 2\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def longest_palindrome_substring(string):\n    n = len(string)\n    longest_palindrome = \"\"\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < n and string[left] == string[right]:\n            left -= 1\n            right += 1\n        return string[left + 1:right]\n\n    for i in range(n):\n        odd_palindrome = expand_around_center(i, i)  \n        even_palindrome = expand_around_center(i, i + 1)  \n\n        \n        if len(odd_palindrome) > len(longest_palindrome):\n            longest_palindrome = odd_palindrome\n        if len(even_palindrome) > len(longest_palindrome):\n            longest_palindrome = even_palindrome\n\n    return longest_palindrome\nstring = \"babad\"\nlongest_palindrome = longest_palindrome_substring(string)\nprint(\"Longest palindrome substring:\", longest_palindrome)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 48,
      "outputs": [
        {
          "name": "stdout",
          "text": "Longest palindrome substring: bab\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def count_occurrences(lst, element):\n    count = 0\n    for item in lst:\n        if item == element:\n            count += 1\n    return count\nnumbers = [1, 2, 3, 2, 4, 2, 5]\nelement = 2\noccurrences = count_occurrences(numbers, element)\nprint(\"Number of occurrences of\", element, \":\", occurrences)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 49,
      "outputs": [
        {
          "name": "stdout",
          "text": "Number of occurrences of 2 : 3\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def is_perfect_number(number):\n    if number <= 0:\n        return False\n\n    sum_of_divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors == number\nnumber = 28\nif is_perfect_number(number):\n    print(number, \"is a perfect number.\")\nelse:\n    print(number, \"is not a perfect number.\")\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 50,
      "outputs": [
        {
          "name": "stdout",
          "text": "28 is a perfect number.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def remove_duplicates(string):\n    unique_chars = \"\"\n    for char in string:\n        if char not in unique_chars:\n            unique_chars += char\n    return unique_chars\nstring = \"Hello, World!\"\nresult = remove_duplicates(string)\nprint(\"String after removing duplicates:\", result)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 51,
      "outputs": [
        {
          "name": "stdout",
          "text": "String after removing duplicates: Helo, Wrd!\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def first_missing_positive(nums):\n    n = len(nums)\n\n    left = 0\n    for i in range(n):\n        if nums[i] <= 0:\n            nums[i], nums[left] = nums[left], nums[i]\n            left += 1\n\n    for i in range(left, n):\n        num = abs(nums[i])\n        if num <= n - left:\n            nums[left + num - 1] = -abs(nums[left + num - 1])\n\n    \n    for i in range(left, n):\n        if nums[i] > 0:\n            return i - left + 1\n\n    return n - left + 1\nnums = [3, 4, -1, 1]\nresult = first_missing_positive(nums)\nprint(\"First missing positive number:\", result)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 52,
      "outputs": [
        {
          "name": "stdout",
          "text": "First missing positive number: 2\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}